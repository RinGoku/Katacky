generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model TicketManager {
  id             Int              @id @default(autoincrement())
  name           String
  count          Int
  type           TicketManageType
  creatorId      Int
  retrieveUserId Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ticketId       Int
  retrieveUser   User             @relation(fields: [retrieveUserId], references: [id])
  ticket         Ticket           @relation(fields: [ticketId], references: [id])
}

model Ticket {
  id                Int             @id @default(autoincrement())
  title             String
  message           String
  backgroundColor   String?
  backgroundImage   String?
  creatorId         Int
  holderId          Int?
  isUsed            Boolean         @default(false)
  isScheduled       Boolean         @default(false)
  availableDateFrom DateTime?
  expiredDate       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  usedDate          DateTime?       @updatedAt
  effect            String?
  useMessage        String?
  from              String
  to                String
  creator           User            @relation("author", fields: [creatorId], references: [id])
  holder            User?           @relation("holder", fields: [holderId], references: [id])
  TicketManager     TicketManager[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int
  user      User[]   @relation("userGroup")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  name            String
  authId          String          @unique
  groupId         Int?
  deviceToken     String?         
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  profileImageUrl String?
  ticketsCreated  Ticket[]        @relation("author")
  ticketsOwned    Ticket[]        @relation("holder")
  group           Group?          @relation("userGroup", fields: [groupId], references: [id])
  TicketManager   TicketManager[]
}

enum TicketManageType {
  ONCE_YEAR
  ONCE_MONTH
  ONCE_WEEK
  ONCE_DAY
}
